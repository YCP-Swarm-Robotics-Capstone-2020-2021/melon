// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#ifndef PROTOBUF_INCLUDED_state_2eproto
#define PROTOBUF_INCLUDED_state_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_state_2eproto 

namespace protobuf_state_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_state_2eproto
class MarkerIds;
class MarkerIdsDefaultTypeInternal;
extern MarkerIdsDefaultTypeInternal _MarkerIds_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class State_RobotsEntry_DoNotUse;
class State_RobotsEntry_DoNotUseDefaultTypeInternal;
extern State_RobotsEntry_DoNotUseDefaultTypeInternal _State_RobotsEntry_DoNotUse_default_instance_;
namespace google {
namespace protobuf {
template<> ::MarkerIds* Arena::CreateMaybeMessage<::MarkerIds>(Arena*);
template<> ::State* Arena::CreateMaybeMessage<::State>(Arena*);
template<> ::State_RobotsEntry_DoNotUse* Arena::CreateMaybeMessage<::State_RobotsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class MarkerIds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MarkerIds) */ {
 public:
  MarkerIds();
  virtual ~MarkerIds();

  MarkerIds(const MarkerIds& from);

  inline MarkerIds& operator=(const MarkerIds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarkerIds(MarkerIds&& from) noexcept
    : MarkerIds() {
    *this = ::std::move(from);
  }

  inline MarkerIds& operator=(MarkerIds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MarkerIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarkerIds* internal_default_instance() {
    return reinterpret_cast<const MarkerIds*>(
               &_MarkerIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MarkerIds* other);
  friend void swap(MarkerIds& a, MarkerIds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarkerIds* New() const final {
    return CreateMaybeMessage<MarkerIds>(NULL);
  }

  MarkerIds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarkerIds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarkerIds& from);
  void MergeFrom(const MarkerIds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarkerIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 ids = 1;
  int ids_size() const;
  void clear_ids();
  static const int kIdsFieldNumber = 1;
  ::google::protobuf::int32 ids(int index) const;
  void set_ids(int index, ::google::protobuf::int32 value);
  void add_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:MarkerIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ids_;
  mutable int _ids_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_state_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class State_RobotsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<State_RobotsEntry_DoNotUse, 
    ::std::string, ::MarkerIds,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<State_RobotsEntry_DoNotUse, 
    ::std::string, ::MarkerIds,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  State_RobotsEntry_DoNotUse();
  State_RobotsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const State_RobotsEntry_DoNotUse& other);
  static const State_RobotsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const State_RobotsEntry_DoNotUse*>(&_State_RobotsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class State : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(State* other);
  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(NULL);
  }

  State* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .MarkerIds> robots = 1;
  int robots_size() const;
  void clear_robots();
  static const int kRobotsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::MarkerIds >&
      robots() const;
  ::google::protobuf::Map< ::std::string, ::MarkerIds >*
      mutable_robots();

  // @@protoc_insertion_point(class_scope:State)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      State_RobotsEntry_DoNotUse,
      ::std::string, ::MarkerIds,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > robots_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_state_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarkerIds

// repeated int32 ids = 1;
inline int MarkerIds::ids_size() const {
  return ids_.size();
}
inline void MarkerIds::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::int32 MarkerIds::ids(int index) const {
  // @@protoc_insertion_point(field_get:MarkerIds.ids)
  return ids_.Get(index);
}
inline void MarkerIds::set_ids(int index, ::google::protobuf::int32 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:MarkerIds.ids)
}
inline void MarkerIds::add_ids(::google::protobuf::int32 value) {
  ids_.Add(value);
  // @@protoc_insertion_point(field_add:MarkerIds.ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MarkerIds::ids() const {
  // @@protoc_insertion_point(field_list:MarkerIds.ids)
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MarkerIds::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:MarkerIds.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// State

// map<string, .MarkerIds> robots = 1;
inline int State::robots_size() const {
  return robots_.size();
}
inline void State::clear_robots() {
  robots_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::MarkerIds >&
State::robots() const {
  // @@protoc_insertion_point(field_map:State.robots)
  return robots_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::MarkerIds >*
State::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_map:State.robots)
  return robots_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_state_2eproto
